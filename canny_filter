import numpy as np
import os
import cv2 as cv
import matplotlib.pyplot as plot



# # defining the canny detector function
#
# # here weak_th and strong_th are thresholds for
# # double thresholding step
# def Canny_detector(img, weak_th=None, strong_th=None):
#     # conversion of image to grayscale
#     img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#
#     # Noise reduction step
#     img = cv2.GaussianBlur(img, (5, 5), 1.4)
#
#     # Calculating the gradients
#     gx = cv2.Sobel(np.float32(img), cv2.CV_64F, 1, 0, 3)
#     gy = cv2.Sobel(np.float32(img), cv2.CV_64F, 0, 1, 3)
#
#     # Conversion of Cartesian coordinates to polar
#     mag, ang = cv2.cartToPolar(gx, gy, angleInDegrees=True)
#
#     # setting the minimum and maximum thresholds
#     # for double thresholding
#     mag_max = np.max(mag)
#     if not weak_th: weak_th = mag_max * 0.1 ##0.1
#     if not strong_th: strong_th = mag_max * 0.5 ##0.5
#
#     # getting the dimensions of the input image
#     height, width = img.shape
#
#     # Looping through every pixel of the grayscale
#     # image
#     for i_x in range(width):
#         for i_y in range(height):
#
#             grad_ang = ang[i_y, i_x]
#             grad_ang = abs(grad_ang - 180) if abs(grad_ang) > 180 else abs(grad_ang)
#
#             # selecting the neighbours of the target pixel
#             # according to the gradient direction
#             # In the x axis direction
#             if grad_ang <= 22.5:
#                 neighb_1_x, neighb_1_y = i_x - 1, i_y
#                 neighb_2_x, neighb_2_y = i_x + 1, i_y
#
#             # top right (diagonal-1) direction
#             elif grad_ang > 22.5 and grad_ang <= (22.5 + 45):
#                 neighb_1_x, neighb_1_y = i_x - 1, i_y - 1
#                 neighb_2_x, neighb_2_y = i_x + 1, i_y + 1
#
#             # In y-axis direction
#             elif grad_ang > (22.5 + 45) and grad_ang <= (22.5 + 90):
#                 neighb_1_x, neighb_1_y = i_x, i_y - 1
#                 neighb_2_x, neighb_2_y = i_x, i_y + 1
#
#             # top left (diagonal-2) direction
#             elif grad_ang > (22.5 + 90) and grad_ang <= (22.5 + 135):
#                 neighb_1_x, neighb_1_y = i_x - 1, i_y + 1
#                 neighb_2_x, neighb_2_y = i_x + 1, i_y - 1
#
#             # Now it restarts the cycle
#             elif grad_ang > (22.5 + 135) and grad_ang <= (22.5 + 180):
#                 neighb_1_x, neighb_1_y = i_x - 1, i_y
#                 neighb_2_x, neighb_2_y = i_x + 1, i_y
#
#             # Non-maximum suppression step
#             if width > neighb_1_x >= 0 and height > neighb_1_y >= 0:
#                 if mag[i_y, i_x] < mag[neighb_1_y, neighb_1_x]:
#                     mag[i_y, i_x] = 0
#                     continue
#
#             if width > neighb_2_x >= 0 and height > neighb_2_y >= 0:
#                 if mag[i_y, i_x] < mag[neighb_2_y, neighb_2_x]:
#                     mag[i_y, i_x] = 0
#
#     weak_ids = np.zeros_like(img)
#     strong_ids = np.zeros_like(img)
#     ids = np.zeros_like(img)
#
#     # double thresholding step
#     for i_x in range(width):
#         for i_y in range(height):
#
#             grad_mag = mag[i_y, i_x]
#
#             if grad_mag < weak_th:
#                 mag[i_y, i_x] = 0
#             elif strong_th > grad_mag >= weak_th:
#                 ids[i_y, i_x] = 1
#             else:
#                 ids[i_y, i_x] = 2
#
#     # finally returning the magnitude of
#     # gradients of edges
#     return mag
#
# if __name__ == '__main__':
#     # frame_2 = cv2.imread('frame-1c.jpg')
#     frame_3 = cv2.imread("/Users/natalka/PycharmProjects/image_registration_algorithm/test_1/frame-2.jpg")
#     # calling the designed function for
#     # finding edges
#     # canny_img_2 = Canny_detector(frame_2)
#     canny_img_3 = Canny_detector(frame_3)
#
#     # outFilename = "/Users/natalka/PycharmProjects/image_registration_algorithm/frame0.png"
#     # print("Saving aligned image : ", outFilename);
#     # cv2.imwrite(outFilename, canny_img_2)
#
#     outFilename = "/Users/natalka/PycharmProjects/image_registration_algorithm/c_filter/cc_f1"
#     print("Saving aligned image : ", outFilename);
#     cv2.imwrite(outFilename, canny_img_3)
#
#     # Displaying the input and output image
#     # plt.figure()
#     # f, plots = plt.subplots(2, 1)
#     # plots[0].imshow(frame_2)
#     # plots[1].imshow(canny_img_2,  cmap='white')
#     # plt.show()
#
#
#     plt.figure()
#     f, plots = plt.subplots(2, 1)
#     plots[0].imshow(frame_3)
#     plots[1].imshow(canny_img_3,  cmap='white')
#     plt.show()


def img_show(title, image):
    plot.title(title)
    plot.xticks([])
    plot.yticks([])
    plot.imshow(image, cmap="gray")
    plot.show()

# read in our original image as grayscale
img = cv.imread("frame-2.jpg", cv.IMREAD_GRAYSCALE)

# show grayscale image using our helper function
img_show("Grayscale Image", img)


# blurring the image with a 5x5, sigma = 1 Guassian kernel
img_blur = cv.GaussianBlur(img, (5, 5), 1)

# obtaining a horizontal and vertical Sobel filtering of the image
img_sobelx = cv.Sobel(img_blur, cv.CV_64F, 1, 0, ksize=3)
img_sobely = cv.Sobel(img_blur, cv.CV_64F, 0, 1, ksize=3)

# image with both horizontal and vertical Sobel kernels applied
img_sobelxy = cv.addWeighted(cv.convertScaleAbs(img_sobelx), 0.5, cv.convertScaleAbs(img_sobely), 0.5, 0)


# finally, generate canny edges
# extreme examples: high threshold [900, 1000]; low threshold [1, 10]
img_edges = cv.Canny(img, 50, 100)
